#!/usr/bin/env node
/**
 *
 */

var p = console.log;

var assert = require('assert-plus');
var dashdash = require('dashdash');
var du = require('du');
var format = require('util').format;
var fs = require('fs');
var glob = require('glob');
var path = require('path');
var rimraf = require('rimraf');



// ---- globals

var VERBOSE = false;
var CONFIG_FILE = '.kthxbai';



// ---- internal support stuff

function _errorCb(err) {
    if (err) {
        console.error('kthxbai: error: %s', VERBOSE ? err.stack : err.message);
        process.exit(1);
    }
    process.exit(0);
}

function parseConfig(data) {
    var config = {
        pragmas: {},
        patterns: []
    };

    var lines = data.trim().split(/\r?\n/g);
    for (var i = 0; i < lines.length; i++) {
        var line = lines[i].trim();
        if (line.length === 0) {
            continue;
        } else if (line[0] === '#') {
            /**
             * This could be a pragma:
             *    # +pragma: PRAGMA1 [PRAGMA2...]
             * or just a comment.
             */
            line = line.slice(1).trim();
            if (line.slice(0, 8) === '+pragma:') {
                line.slice(8).trim().split(/\s+/g).forEach(function (p) {
                    config.pragmas[p] = true;
                });
            }
        } else {
            config.patterns.push(line);
        }
    }

    return config;
}

function loadConfigSync(opts) {
    assert.string(opts.projDir, 'opts.projDir');
    assert.bool(opts.force, 'opts.force');

    var confPath = path.join(opts.projDir, CONFIG_FILE);
    if (!fs.existsSync(confPath)) {
        if (opts.force) {
            confPath = path.resolve(__dirname, '../skel/kthxbai');
        } else {
            throw new Error(format('no "%s" config file (use `kthxbai --init` '
                + 'to create one or `kthxbai --force` to clean cruft without)',
                confPath));
        }
    }

    var data = fs.readFileSync(confPath, {encoding: 'utf8'});
    return parseConfig(data);
}

function findProjDirSync() {
    // TODO: relative to a given dir when dir arg is supported
    var dir = process.cwd();
    while (true) {
        if (fs.existsSync(path.join(dir, 'package.json'))) {
            return dir;
        }
        var parent = path.dirname(dir);
        if (parent === dir) {
            throw new Error(format(
                'could not find package.json in "%s" or parent dirs', dir));
        }
        dir = parent;
    }
}

function kthxbaiInit(opts, cb) {
    assert.bool(opts.dryRun, 'opts.dryRun');
    assert.string(opts.projDir, 'opts.projDir');

    var skel = path.resolve(__dirname, '../skel/kthxbai');
    var conf = path.join(opts.projDir, CONFIG_FILE);
    fs.readFile(skel, function (err, data) {
        if (err)
            return cb(err);

        if (opts.dryRun) {
            console.log('[dry-run] "%s" created with default patterns', conf);
            return cb();
        }

        fs.writeFile(conf, data, function (err) {
            if (err)
                return cb(err);
            console.log('"%s" created with default patterns', conf);
            cb();
        });
    });
}


function kthxbai(opts, cb) {
    assert.string(opts.projDir, 'opts.projDir');
    assert.bool(opts.dryRun, 'opts.dryRun');
    assert.bool(opts.verbose, 'opts.verbose');
    assert.bool(opts.force, 'opts.force');

    var dir = path.resolve(opts.projDir, 'node_modules');
    var relDir = path.relative(process.cwd(), dir);
    if (! fs.existsSync(dir)) {
        throw new Error(format('"%s" does not exist', relDir));
    }

    var base = path.basename(dir);
    if (base !== 'node_modules' && path.basename(base) !== 'node_modules') {
        throw new Error(format('"%s" is not a node_modules dir or subdir',
            relDir));
    }

    // Note this the count of bytes underestimates the FS usage because of
    // block size.
    du(dir, function (err, startSize) {
        try {
            config = loadConfigSync(opts);
        } catch (err) {
            return cb(err);
        }

        var patterns = config.patterns;
        if (config.pragmas['rm-self']) {
            patterns.push('.bin/kthxbai');
            patterns.push('kthxbai');
        }

        var rmCount = 0;
        var globOpts = {
            cwd: dir,
            cache: {},
            statCache: {},
            symlinks: {},
        }
        for (var i = 0; i < config.patterns.length; i++) {
            var pattern = config.patterns[i];
            var files = glob.sync(pattern, globOpts);
            for (var j = 0; j < files.length; j++) {
                rmCount++;
                var file = path.join(dir, files[j]);
                if (opts.verbose) {
                    var relFile = path.join(relDir, files[j]);
                    p('rm %s', relFile);
                }
                if (!opts.dryRun) {
                    rimraf.sync(path.join(dir, files[j]));
                }
            }
        }

        var scrubCount = 0;
        if (config.pragmas['scrub-package-json']) {
            // Trying to limit to server-added fields, but could consider
            // stripping down to bare minimum for running.
            var scrubFields = ['readme', '_id', '_shasum', '_from',
                '_resolved', 'readmeFilename', 'bugs'];
            var files = glob.sync('**/package.json', globOpts);
            for (var i = 0; i < files.length; i++) {
                var file = path.join(dir, files[i]);
                var content = fs.readFileSync(file, {encoding: 'utf8'});
                try {
                    var packageJson = JSON.parse(content);
                } catch (e) {
                    p('warning: cannot parse "%s"', file);
                    continue;
                }
                scrubFields.forEach(function (field) {
                    delete packageJson[field];
                });
                var newContent = JSON.stringify(packageJson, null, 2);
                if (content !== newContent) {
                    if (opts.verbose) {
                        var relFile = path.join(relDir, file);
                        p('scrub %s', relFile);
                    }
                    fs.writeFileSync(file, newContent, {encoding: 'utf8'});
                    scrubCount++;
                }
            }
        }

        du(dir, function (err, endSize) {
            var extra = (opts.dryRun ? ' (dry-run)' : '');
            if (scrubCount) {
                p('    %d package.json file%s scrubbed under "%s"%s',
                    scrubCount, scrubCount === 1 ? '' : 's', dir, extra);
            }
            p('    %d file%s/dir%s removed under "%s"%s',
                rmCount, rmCount === 1 ? '' : 's', rmCount === 1 ? '' : 's',
                dir, extra);
            p('    %s bytes -> %s bytes (%d%%)', startSize, endSize,
                Math.round(100 - 100 * endSize / startSize));
            cb();
        });
    });
}



// ---- mainline

function main(argv) {
    var options = [
        {
            name: 'version',
            type: 'bool',
            help: 'Print tool version and exit.'
        },
        {
            names: ['help', 'h'],
            type: 'bool',
            help: 'Print this help and exit.'
        },
        {
            names: ['verbose', 'v'],
            type: 'bool',
            help: 'Verbose output.',
            default: false
        },
        {
            names: ['dry-run', 'n'],
            type: 'bool',
            help: 'Do a dry-run.',
            default: false
        },
        {
            names: ['init'],
            type: 'bool',
            help: 'Initialize a .kthxbai file.'
        },
        {
            names: ['force'],
            type: 'bool',
            help: 'Allow cruft clean up without a ".kthxbai" config file.',
            default: false
        }
    ];

    var parser = dashdash.createParser({options: options});
    try {
        var opts = parser.parse(argv);
    } catch (e) {
        console.error('kthxbai: error: %s', e.message);
        process.exit(1);
    }
    if (opts.verbose) {
        VERBOSE = opts.verbose;
    }

    if (opts.help) {
        var help = parser.help({includeEnv: true}).trimRight();
        p('usage:\n'
            + '    aykfm [<options>]\n'
            + '\n'
            + 'options:\n'
            + help);
        process.exit(0);
    } else if (opts.version) {
        var pkg = require('../package.json');
        p('kthxbai ' + pkg.version);
        p(pkg.homepage);
        process.exit(0);
    } else if (opts.init) {
        kthxbaiInit({
            dryRun: opts.dry_run,
            verbose: opts.verbose,
            projDir: findProjDirSync(),
        }, _errorCb);
    } else {
        kthxbai({
            dryRun: opts.dry_run,
            force: opts.force,
            verbose: opts.verbose,
            projDir: findProjDirSync(),
        }, _errorCb);
    }
}


if (require.main === module) {
    main(process.argv);
}
